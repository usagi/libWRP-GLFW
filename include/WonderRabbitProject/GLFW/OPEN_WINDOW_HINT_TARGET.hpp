enum class HINT : int
{ REFRESH_RATE          = GLFW_REFRESH_RATE
, ACCUM_RED_BITS        = GLFW_ACCUM_RED_BITS
, ACCUM_GREEN_BITS      = GLFW_ACCUM_GREEN_BITS
, ACCUM_BLUE_BITS       = GLFW_ACCUM_BLUE_BITS
, ACCUM_ALPHA_BITS      = GLFW_ACCUM_ALPHA_BITS
, AUX_BUFFERS           = GLFW_AUX_BUFFERS
, STEREO                = GLFW_STEREO
, WINDOW_NO_RESIZE      = GLFW_WINDOW_NO_RESIZE
, FSAA_SAMPLES          = GLFW_FSAA_SAMPLES
, OPENGL_VERSION_MAJOR  = GLFW_OPENGL_VERSION_MAJOR
, OPENGL_VERSION_MINOR  = GLFW_OPENGL_VERSION_MINOR
, OPENGL_FORWARD_COMPAT = GLFW_OPENGL_FORWARD_COMPAT
, OPENGL_DEBUG_CONTEXT  = GLFW_OPENGL_DEBUG_CONTEXT
, OPENGL_PROFILE        = GLFW_OPENGL_PROFILE
};

#ifndef WRP_GLFW_NOT_UNDEF
  #undef GLFW_REFRESH_RATE
  #undef GLFW_ACCUM_RED_BITS
  #undef GLFW_ACCUM_GREEN_BITS
  #undef GLFW_ACCUM_BLUE_BITS
  #undef GLFW_ACCUM_ALPHA_BITS
  #undef GLFW_AUX_BUFFERS
  #undef GLFW_STEREO
  #undef GLFW_WINDOW_NO_RESIZE
  #undef GLFW_FSAA_SAMPLES
  #undef GLFW_OPENGL_VERSION_MAJOR
  #undef GLFW_OPENGL_VERSION_MINOR
  #undef GLFW_OPENGL_FORWARD_COMPAT
  #undef GLFW_OPENGL_DEBUG_CONTEXT
  #undef GLFW_OPENGL_PROFILE
#endif

enum class OPENGL_PROFILE : unsigned
{ CORE = GLFW_OPENGL_CORE_PROFILE
, COMPAT = GLFW_OPENGL_COMPAT_PROFILE
};

#ifndef WRP_GLFW_NOT_UNDEF
  #undef GLFW_OPENGL_CORE_PROFILE
  #undef GLFW_OPENGL_COMPAT_PROFILE
#endif

std::string to_string(HINT v)
{ switch(v){
  case HINT::REFRESH_RATE          : return "REFRESH_RATE";
  case HINT::ACCUM_RED_BITS        : return "ACCUM_RED_BITS";
  case HINT::ACCUM_GREEN_BITS      : return "ACCUM_GREEN_BITS";
  case HINT::ACCUM_BLUE_BITS       : return "ACCUM_BLUE_BITS";
  case HINT::ACCUM_ALPHA_BITS      : return "ACCUM_ALPHA_BITS";
  case HINT::AUX_BUFFERS           : return "AUX_BUFFERS";
  case HINT::STEREO                : return "STEREO";
  case HINT::WINDOW_NO_RESIZE      : return "WINDOW_NO_RESIZE";
  case HINT::FSAA_SAMPLES          : return "FSAA_SAMPLES";
  case HINT::OPENGL_VERSION_MAJOR  : return "OPENGL_VERSION_MAJOR";
  case HINT::OPENGL_VERSION_MINOR  : return "OPENGL_VERSION_MINOR";
  case HINT::OPENGL_FORWARD_COMPAT : return "OPENGL_FORWARD_COMPAT";
  case HINT::OPENGL_DEBUG_CONTEXT  : return "OPENGL_DEBUG_CONTEXT";
  case HINT::OPENGL_PROFILE        : return "OPENGL_PROFILE";
  default                          : return std::string();
  }
}

std::string to_string(OPENGL_PROFILE v)
{ switch(v){
  case OPENGL_PROFILE::CORE   : return "CORE";
  case OPENGL_PROFILE::COMPAT : return "COMPAT";
  default                     : return std::string();
  }
}

